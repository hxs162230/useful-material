924. Minimize Malware Spread

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length


 Algorithm              Constructor     Union       Find
 Quick-Find                 N              N          1
 Quick-Union                N         Tree height  Tree height
 Weighted Quick-Union       N              lgN        lgN



T:O(N*logN) 除去最大毒瘤題

class Solution {
    int[] pre;
    public int findRoot(int x){
        if(pre[x]==x){
            return x;
        }
        return pre[x]=findRoot(pre[x]);
    }
    public void union(int x,int y){
        pre[y]=x;
        pre[x]=x;
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
         int num = graph.length;
         pre = new int[num];
         HashMap<Integer,Integer> map =new HashMap<>(); //size for node

         for(int i=0;i<num;i++){
             pre[i]=i;
             map.put(i,1);
         }

         for(int i=0;i<num;i++){
             for(int j=i+1;j<graph[0].length;j++){
                 if(graph[i][j]==1){
                     int x_pre = findRoot(i);
                     int y_pre = findRoot(j);
                     if(x_pre!=y_pre){
                     union(x_pre,y_pre);
                     map.put(x_pre,map.get(x_pre)+map.get(y_pre));
                     }
                 }
             }
         }

        int ans = Integer.MAX_VALUE;
        int max = 0;
        HashMap<Integer,Integer> seen = new HashMap<>();
        for(int i=0;i<initial.length;i++){
            ans = Math.min(ans,initial[i]);
        }                                       always remove a node in initial lst (initailize ans);
        
        for(int i=0;i<initial.length;i++){
            int par = findRoot(initial[i]);
           seen.put(par,seen.getOrDefault(par,0)+1);
        }

        for(int i=0;i<initial.length;i++){
            int par = findRoot(initial[i]);
            if(seen.get(par)==1){                 群集只有一個感染
                if(map.get(par)>max){             選最大刪除 更新最大刪除量  
                    max = map.get(par);
                    ans = initial[i];
                }
                else if(map.get(par)==max){
                    ans = Math.min(ans,initial[i]);    刪除量一樣   選IDX最低的那個刪除
                }
            }
        }
        return ans;
    }

}